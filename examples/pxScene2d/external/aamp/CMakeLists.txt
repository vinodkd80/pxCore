# If not stated otherwise in this file or this component's license file the
# following copyright and licenses apply:
#
# Copyright 2018 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
cmake_minimum_required (VERSION 2.6)
project (AAMP)
#find_package(GStreamer 1.4 REQUIRED)
#add_subdirectory(jsbindings)
find_package(PkgConfig REQUIRED)

if(NOT CMAKE_USE_GST_0.10)
	message("CMAKE_USE_GST_0.10 not set, use gstreamer-1.0")
	pkg_check_modules(GSTREAMER REQUIRED gstreamer-1.0)
	pkg_check_modules(GSTREAMERBASE REQUIRED gstreamer-app-1.0)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_GST1")
else()
	message("CMAKE_USE_GST_0.10 set, use gstreamer-0.10")
	pkg_check_modules(GSTREAMER REQUIRED gstreamer-0.10)
	pkg_check_modules(GSTREAMERBASE REQUIRED gstreamer-app-0.10)
endif()

pkg_check_modules(CURL REQUIRED libcurl)
pkg_check_modules(LibXml2 REQUIRED libxml-2.0)
pkg_check_modules(LIBDASH REQUIRED libdash)
pkg_check_modules(OPENSSL REQUIRED openssl)
pkg_check_modules(CJSON REQUIRED libcjson)

if(CMAKE_QT5WEBKIT_JSBINDINGS)
	message("CMAKE_QT5WEBKIT_JSBINDINGS set")
	pkg_check_modules(Qt5WebKit REQUIRED Qt5WebKit)
	find_path (STAGING_INCDIR webkit-apis/ForwardingHeaders)
	include_directories(${STAGING_INCDIR}/webkit-apis/ForwardingHeaders)
else()
	message("CMAKE_QT5WEBKIT_JSBINDINGS not set")
	find_path (STAGING_INCDIR JavaScriptCore)
	include_directories(${STAGING_INCDIR}/JavaScriptCore)
endif()

if(CMAKE_AAMP_RENDER_IN_APP)
        message("CMAKE_AAMP_RENDER_IN_APP set")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAAMP_RENDER_IN_APP")
if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
        set(OPENGL_LIBRARIES "-framework OpenGL -framework GLUT")
else()
       pkg_check_modules(OPENGL REQUIRED gl)
       set(OPENGL_LIBRARIES "${OPENGL_LIBRARIES} -lglut")
       pkg_check_modules(GLEW REQUIRED glew)
endif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
endif()

# Mac OS X
if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    set(OS_CXX_FLAGS "${OS_CXX_FLAGS} -g -x objective-c++")
    set(OS_LD_FLAGS "${OS_LD_FLAGS} -framework Cocoa")
    string(STRIP ${OS_LD_FLAGS} OS_LD_FLAGS)
    set(AAMP_CLI_LD_FLAGS "${AAMP_CLI_LD_FLAGS} -lgstvideo-1.0")
    string(STRIP ${AAMP_CLI_LD_FLAGS} AAMP_CLI_LD_FLAGS)
    set(AAMP_OS_SOURCES cocoa_window.mm)
else()
    set(USE_MAC_FOR_RANDOM_GEN "-DUSE_MAC_FOR_RANDOM_GEN")
endif(CMAKE_SYSTEM_NAME STREQUAL Darwin)

find_package (Threads REQUIRED)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} drm drm/ave drm/aes metrics)
include_directories(${GSTREAMER_INCLUDE_DIRS})
include_directories(${CURL_INCLUDE_DIRS})
include_directories(${GSTREAMERBASE_INCLUDE_DIRS})
include_directories(${LIBDASH_INCLUDE_DIRS})
include_directories(${LibXml2_INCLUDE_DIRS})
include_directories(${OPENSSL_INCLUDE_DIRS})
include_directories(${OPENGL_INCLUDE_DIRS})
include_directories(${GLEW_INCLUDE_DIRS})
include_directories(${CJSON_INCLUDE_DIRS})

link_directories(${GSTREAMER_LIBRARY_DIRS})
link_directories(${CURL_LIBRARY_DIRS})
link_directories(${GSTREAMERBASE_LIBRARY_DIRS})
link_directories(${LIBDASH_LIBRARY_DIRS})
link_directories(${LibXml2_LIBRARY_DIRS})
link_directories(${OPENSSL_LIBRARY_DIRS})
link_directories(${OPENGL_LIBRARY_DIRS})
link_directories(${GLEW_LIBRARY_DIRS})
link_directories(${CJSON_LIBRARY_DIRS})

set(LIBAAMP_SOURCES base16.cpp fragmentcollector_hls.cpp fragmentcollector_mpd.cpp streamabstraction.cpp _base64.cpp drm/ave/drm.cpp main_aamp.cpp aampgstplayer.cpp tsprocessor.cpp drm/aes/aamp_aes.cpp aamplogging.cpp AampCacheHandler.cpp metrics/HTTPStatistics.cpp metrics/LicnStatistics.cpp metrics/FragmentStatistics.cpp metrics/VideoStat.cpp metrics/ProfileInfo.cpp)

if(CMAKE_CONTENT_METADATA_IPDVR_ENABLED)
	message("CMAKE_CONTENT_METADATA_IPDVR_ENABLED set")
	set(SEC_CLIENT_LIB -lSecClient )
	set(SEC_CONTENT_METADATA_ENABLED "-DAAMP_CONTENT_METADATA_IPDVR_ENABLED")
	set(LIBAAMP_SOURCES ${LIBAAMP_SOURCES} drm/ZeroDrmAccessAdapter.cpp)
elseif(CMAKE_USE_SECCLIENT)
	set(SEC_CLIENT_LIB -lSecClient )
endif()

set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAAMP_VANILLA_AES_SUPPORT ${USE_MAC_FOR_RANDOM_GEN}")

if(CMAKE_USE_RDK_PLUGINS)
	message("CMAKE_USE_RDK_PLUGINS set")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_PLAYERSINKBIN -DREAD_ESTB_IFACE_FROM_DEVICE_PROPERTIES -DCREATE_PIPE_SESSION_TO_XRE")
	if(CMAKE_USE_OPENCDM)
		message("CMAKE_USE_OPENCDM set")
		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_OPENCDM")
	endif()
endif()

set(LIBAAMP_DEPENDS ${OS_LD_FLAGS} ${GSTREAMERBASE_LIBRARIES} ${GSTREAMER_LIBRARIES} ${CURL_LIBRARIES} ${LIBDASH_LIBRARIES} ${LibXml2_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${OPENSSL_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES} ${AAMP_CLI_LD_FLAGS} -ldl -labr -luuid ${SEC_CLIENT_LIB} ${CJSON_LIBRARIES})
set(PLAYBINTEST_DEPENDS ${OS_LD_FLAGS} ${CMAKE_THREAD_LIBS_INIT} ${GSTREAMER_LIBRARIES})

if(CMAKE_QT5WEBKIT_JSBINDINGS)
	message("CMAKE_QT5WEBKIT_JSBINDINGS set")
	set(LIBAAMP_SOURCES ${LIBAAMP_SOURCES} jsbindings/jsbindings.cpp jsbindings/jsutils.cpp jsbindings/jsmediaplayer.cpp jsbindings/jseventlistener.cpp jsbindings/jsevent.cpp)
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DSUPPORT_JS_EVENTS")
	set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -l${Qt5WebKit_LIBRARIES}")
elseif(CMAKE_WPEWEBKIT_JSBINDINGS)
	message("CMAKE_WPEWEBKIT_JSBINDINGS set")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DSUPPORT_JS_EVENTS")
else()
	message("CMAKE_WPEWEBKIT_JSBINDINGS and CMAKE_WPEWEBKIT_JSBINDINGS not set")
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-multichar -std=c++11 -Wno-non-virtual-dtor")

if(CMAKE_IARM_MGR)
	message("CMAKE_IARM_MGR set")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DIARM_MGR")
endif()

set(AAMP_CLI_SOURCES test/aampcli.cpp ${AAMP_OS_SOURCES})

if(CMAKE_AVE_DRM)
	message("CMAKE_AVE_DRM set")
	set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -laveadapter -lAVEPlayer")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAVE_DRM")
	set(AAMP_CLI_SOURCES ${AAMP_CLI_SOURCES} drm/ave/StubsForAVEPlayer.cpp)
	#Linking QT libraries to libaamp will make local stubs obsolete for aamp-cli
	if(NOT CMAKE_QT5WEBKIT_JSBINDINGS AND CMAKE_WPEWEBKIT_JSBINDINGS)
		set(AAMP_CLI_EXTRA_DEFINES "${AAMP_CLI_EXTRA_DEFINES} -DAAMP_STUBS_FOR_JS")
	endif()
endif()

if(CMAKE_DASH_DRM)
	message("CMAKE_DASH_DRM set")
	if(CMAKE_USE_OPENCDM)
		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_OPENCDM")
		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/opencdmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
	elseif(CMAKE_USE_OPENCDM_ADAPTER)
		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_OPENCDM -DUSE_OPENCDM_ADAPTER")
		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/opencdmsessionadapter.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
	else()
		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/playreadydrmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
	endif()
	set(LIBAAMP_SOURCES "${LIBAAMP_SOURCES}" "${LIBAAMP_DRM_SOURCES}")
endif()

add_library(aamp SHARED ${LIBAAMP_SOURCES})
add_executable(aamp-cli ${AAMP_CLI_SOURCES})
add_executable(playbintest test/playbintest.cpp)
target_link_libraries(playbintest ${PLAYBINTEST_DEPENDS})

if(CMAKE_DASH_DRM)
	set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lIARMBus -lds -ldshalcli")
	if(CMAKE_USE_OPENCDM)
		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
			if(DEFINED SAGE_SVP)
				set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SAGE_SVP -DCONTENT_4K_SUPPORTED")
				set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm -lb_secbuf -lnexus -lbrcmsvpmeta -lsec_api")
			else()
				set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm -lsec_api")
			endif()
		elseif(DEFINED SECAPI_ENGINE_BROADCOM_RAAGA)
			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
			set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm -lsec_api")
		else()
			set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm -lsec_api_crypto")
		endif()
		find_path (STAGING_INCDIR opencdm)
		include_directories(${STAGING_INCDIR}/opencdm)
	elseif(CMAKE_USE_OPENCDM_ADAPTER)
		set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm")
		find_path (STAGING_INCDIR opencdm)
		find_path (STAGING_INCDIR gstreamer-1.0)
		include_directories(${STAGING_INCDIR}/opencdm)
		include_directories(${STAGING_INCDIR}/gstreamer-1.0)
	else ()
		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
			if(DEFINED SAGE_SVP)
				set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SAGE_SVP -DCONTENT_4K_SUPPORTED")
				set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lplayready -lsec_api -lb_secbuf -lnexus -lbrcmsvpmeta")
			else()
				set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lplayready -lsec_api")
			endif()
		elseif(DEFINED SECAPI_ENGINE_BROADCOM_RAAGA)
			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
			set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lplayready -lsec_api")
		else()
			set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lplayready -lsec_api_crypto")
		endif()
		find_path (STAGING_INCDIR playready)
		find_path (STAGING_INCDIR playready/oem/common/inc)
		find_path (STAGING_INCDIR playready/oem/ansi/inc)
		include_directories(${STAGING_INCDIR}/playready)
		include_directories(${STAGING_INCDIR}/playready/oem/common/inc)
		include_directories(${STAGING_INCDIR}/playready/oem/ansi/inc)
	endif()
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAAMP_MPD_DRM=1 -DDRM_BUILD_PROFILE=DRM_BUILD_PROFILE_OEM -DTARGET_LITTLE_ENDIAN=1 -DTARGET_SUPPORTS_UNALIGNED_DWORD_POINTERS=0 ${SEC_CONTENT_METADATA_ENABLED}")
else()
	message("CMAKE_DASH_DRM not set")
endif()

if(CMAKE_SOC_PLATFORM_INTEL)
	message("CMAKE_SOC_PLATFORM_INTEL set")
	set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lismd_core -lismd_vidpproc -lismd_vidsink_direct -lismd_vidrend -lismd_viddec  -lismd_core -lsysloghelper -lgdl")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DINTELCE=1 -DAAMP_STOP_SINK_ON_SEEK=1 -DUSE_SYSLOG_HELPER_PRINT=1")
endif()

if(CMAKE_SYSTEMD_JOURNAL)
    message("CMAKE_SYSTEMD_JOURNAL set")
    set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lsystemd")
    set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SYSTEMD_JOURNAL_PRINT=1 -DSD_JOURNAL_SUPPRESS_LOCATION=1")
endif()

if(CMAKE_USE_SECCLIENT)
	message("CMAKE_USE_SECCLIENT set")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECCLIENT")
endif()

if(CMAKE_WPEWEBKIT_JSBINDINGS)
	message("CMAKE_WPEWEBKIT_JSBINDINGS set")
	add_subdirectory(test)
	add_library(aampjsbindings SHARED jsbindings/jscontroller-jsbindings.cpp jsbindings/jsbindings.cpp jsbindings/jsutils.cpp jsbindings/jsmediaplayer.cpp jsbindings/jseventlistener.cpp jsbindings/jsevent.cpp)
	target_link_libraries(aampjsbindings aamp)
	install(TARGETS aampjsbindings DESTINATION lib)
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAAMP_WPEWEBKIT_JSBINDINGS")
endif()

target_link_libraries(aamp ${LIBAAMP_DEPENDS})
target_link_libraries(aamp-cli aamp ${AAMP_CLI_LD_FLAGS})

set_target_properties(aamp PROPERTIES COMPILE_FLAGS "${LIBAAMP_DEFINES} ${OS_CXX_FLAGS}")
#aamp-cli is not an ideal standalone app. It uses private aamp instance for debugging purposes
set_target_properties(aamp-cli PROPERTIES COMPILE_FLAGS "${LIBAAMP_DEFINES} ${AAMP_CLI_EXTRA_DEFINES} ${OS_CXX_FLAGS}")
set_target_properties(aamp PROPERTIES PUBLIC_HEADER "main_aamp.h")
set_target_properties(aamp PROPERTIES PRIVATE_HEADER "priv_aamp.h")

install(TARGETS aamp-cli DESTINATION bin)
install(TARGETS playbintest DESTINATION bin)

install(TARGETS aamp DESTINATION lib PUBLIC_HEADER DESTINATION include PRIVATE_HEADER DESTINATION include)
install(FILES drm/AampDRMSessionManager.h drm/AampDrmSession.h drm/AampDRMutils.h drm/aampdrmsessionfactory.h metrics/VideoStat.h metrics/HTTPStatistics.h metrics/FragmentStatistics.h metrics/LicnStatistics.h metrics/ProfileInfo.h DESTINATION include)
